"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBackend = exports.onboardBackend = exports.doSetup = void 0;
const clc = require("colorette");
const repo = require("./repo");
const poller = require("../../../operation-poller");
const gcp = require("../../../gcp/frameworks");
const utils_1 = require("../../../utils");
const api_1 = require("../../../api");
const frameworks_1 = require("../../../gcp/frameworks");
const error_1 = require("../../../error");
const prompt_1 = require("../../../prompt");
const constants_1 = require("./constants");
const ensureApiEnabled_1 = require("../../../ensureApiEnabled");
const frameworksPollerOptions = {
    apiOrigin: api_1.frameworksOrigin,
    apiVersion: frameworks_1.API_VERSION,
    masterTimeout: 25 * 60 * 1000,
    maxBackoff: 10000,
};
async function doSetup(setup, projectId) {
    setup.frameworks = {};
    await Promise.all([
        (0, ensureApiEnabled_1.ensure)(projectId, "cloudbuild.googleapis.com", "frameworks", true),
        (0, ensureApiEnabled_1.ensure)(projectId, "secretmanager.googleapis.com", "frameworks", true),
        (0, ensureApiEnabled_1.ensure)(projectId, "run.googleapis.com", "frameworks", true),
        (0, ensureApiEnabled_1.ensure)(projectId, "artifactregistry.googleapis.com", "frameworks", true),
    ]);
    (0, utils_1.logBullet)("First we need a few details to create your backend.");
    const location = await (0, prompt_1.promptOnce)({
        name: "region",
        type: "list",
        default: constants_1.DEFAULT_REGION,
        message: "Please select a region " +
            `(${clc.yellow("info")}: Your region determines where your backend is located):\n`,
        choices: constants_1.ALLOWED_REGIONS,
    });
    (0, utils_1.logSuccess)(`Region set to ${location}.\n`);
    let backendId;
    while (true) {
        backendId = await (0, prompt_1.promptOnce)({
            name: "backendId",
            type: "input",
            default: "acme-inc-web",
            message: "Create a name for your backend [1-30 characters]",
        });
        try {
            await gcp.getBackend(projectId, location, backendId);
        }
        catch (err) {
            if (err.status === 404) {
                break;
            }
            throw new error_1.FirebaseError(`Failed to check if backend with id ${backendId} already exists in ${location}`, { original: err });
        }
        (0, utils_1.logWarning)(`Backend with id ${backendId} already exists in ${location}`);
    }
    const backend = await onboardBackend(projectId, location, backendId);
    if (backend) {
        (0, utils_1.logSuccess)(`Successfully created backend:\n\t${backend.name}`);
        (0, utils_1.logSuccess)(`Your site is being deployed at:\n\thttps://${backend.uri}`);
        (0, utils_1.logSuccess)(`View the rollout status by running:\n\tfirebase backends:get ${backendId} --project ${projectId}`);
    }
}
exports.doSetup = doSetup;
function toBackend(cloudBuildConnRepo) {
    return {
        servingLocality: "GLOBAL_ACCESS",
        codebase: {
            repository: `${cloudBuildConnRepo.name}`,
            rootDirectory: "/",
        },
        labels: {},
    };
}
async function onboardBackend(projectId, location, backendId) {
    const cloudBuildConnRepo = await repo.linkGitHubRepository(projectId, location);
    const barnchName = await (0, prompt_1.promptOnce)({
        name: "branchName",
        type: "input",
        default: "main",
        message: "Which branch do you want to deploy?",
    });
    void barnchName;
    const backendDetails = toBackend(cloudBuildConnRepo);
    return await createBackend(projectId, location, backendDetails, backendId);
}
exports.onboardBackend = onboardBackend;
async function createBackend(projectId, location, backendReqBoby, backendId) {
    const op = await gcp.createBackend(projectId, location, backendReqBoby, backendId);
    const backend = await poller.pollOperation(Object.assign(Object.assign({}, frameworksPollerOptions), { pollerName: `create-${projectId}-${location}-${backendId}`, operationResourceName: op.name }));
    return backend;
}
exports.createBackend = createBackend;
